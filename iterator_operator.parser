// Operate Iterators

Expr primary_no_new_array =
	iterate_operator_access.o  {: return o; :}
  ;

Access iterate_operator_access =
	iterate_operator_caller.c ITERATEOP  iterate_operator_body.b {: return new IterateOperator(c, ITERATEOP, b);  :}
  |	iterate_operator_caller.c ANYOP  iterate_operator_body.b {: return new AnyOperator(c, ANYOP, b);  :}
  |	iterate_operator_caller.c COLLECTOP  iterate_operator_body.b {: return new CollectorOperator(c, COLLECTOP, b);  :}
  |	iterate_operator_caller.c EXISTSOP  iterate_operator_body.b {: return new ExistsOperator(c, EXISTSOP, b);  :}
  |	iterate_operator_caller.c FORALLOP  iterate_operator_body.b {: return new ForAllOperator(c, FORALLOP, b);  :}
  |	iterate_operator_caller.c ISUNIQUEOP  iterate_operator_body.b {: return new IsUniqueOperator(c, ISUNIQUEOP, b);  :}
  |	iterate_operator_caller.c ONEOP  iterate_operator_body.b {: return new OneOperator(c, ONEOP, b);  :}
  |	iterate_operator_caller.c REJECTOP  iterate_operator_body.b {: return new RejectOperator(c, REJECTOP, b);  :}
  |	iterate_operator_caller.c SELECTOP  iterate_operator_body.b {: return new SelectOperator(c, SELECTOP, b);  :}
  ;

//TODO: check complete implementation of method_invoctation in GenericMethods.parser in JastAddJ 5
Expr iterate_operator_caller =
	primary.p ITERATORACCESS {: return p; :}
  |	name.n ITERATORACCESS 	 {: return n; :}
  ;
	
IterateOperatorBody iterate_operator_body =
	LPAREN formal_parameter.i iterate_operator_accumulator.a? SEMICOLON iterate_operator_boolean_expression.b? expression.e RPAREN 
	{: return new IterateOperatorBody(i, a, b, e);  :}	
  ;
  
Opt iterate_operator_accumulator =
	COMMA formal_parameter_with_expression.a	 {: return new Opt(a); :}
  ;
	
Opt iterate_operator_boolean_expression =
	expression.e SEMICOLON                       {: return new Opt(e); :}
  ;

ParameterDeclarationWithExpression formal_parameter_with_expression =
	modifiers.m? type.t IDENTIFIER dims.d? ITEQ assignment_expression.a 
	{: return new ParameterDeclarationWithExpression(new Modifiers(m), t.addArrayDims(d), IDENTIFIER, a); :}
  ;
 