
CJStmt combined_definition =
	START intended_function_list.l RBRACK {: return new CombinedDefinition(l); :}
  ;

List intended_function_list =
    intended_function.e                                  	{: return new List().add(e); :}
  |	intended_function_list.l SEMICOLON intended_function.e 	{: return l.add(e); :}
  ;
  
CJStmt intended_function =
	IDENTITY							{: return new Identity(); :}
  |	splitted_definition.l				{: return new SplittedDefinition(l); :}
  | conditional_concurrent_assignment.c	{: return c; :}
  ;
  
List splitted_definition =
    simple_concurrent_assignment.e                             {: return new List().add(e); :}
  |	splitted_definition.l CJCOMMA simple_concurrent_assignment.e {: return l.add(e); :}
  ;
  
AbstractSimpleConcurrentAssignment abstract_simple_concurrent_assignment = 
	simple_concurrent_assignment.a		{: return a; :}
  |	IDENTITY        					{: return new Identity(); :}
  ;

SimpleConcurrentAssignment simple_concurrent_assignment =
	postfix_expression_list.dest CJEQ assignment_expression_list.source 	{: return new SimpleConcurrentAssignment(dest,source); :}
  |	postfix_expression_list.dest CJREFEQ assignment_expression_list.source 	{: return new SimpleConcurrentAssignmentByRef(dest,source); :}
  ;

List postfix_expression_list =
    postfix_expression.e                                 {: return new List().add(e); :}
  |	postfix_expression_list.l COMMA postfix_expression.e {: return l.add(e); :}
  ;

List assignment_expression_list =
    assignment_expression.e                                   	{: return new List().add(e); :}
  |	assignment_expression_list.l COMMA assignment_expression.e 	{: return l.add(e); :}
  ;

CondConcurrentAssignment conditional_concurrent_assignment =
	conditional_assignment_list.l 													{: return new CondConcurrentAssignment(l,  new Opt()); :}
  |	conditional_assignment_list.l CJELSE  abstract_simple_concurrent_assignment.els {: return new CondConcurrentAssignment(l, new Opt(els)); :} 
  ;

List conditional_assignment_list =
    expression_and_abstract_simple_concurrent_assignment.e     										{: return new List().add(new SingleCondConcurrentAssignment(e)); :}
  |	conditional_assignment_list.l CJELSE expression_and_abstract_simple_concurrent_assignment.e 	{: return l.add(new SingleCondConcurrentAssignment(e)); :}
  |	conditional_assignment_list.l CJCOMMA expression_and_abstract_simple_concurrent_assignment.e 		{: return l.add(new SingleNDCondConcurrentAssignment(e)); :}
  ;  
  
ExprAndAbstractSimpleConcurrentAssignment  expression_and_abstract_simple_concurrent_assignment =
	expression.e THEN abstract_simple_concurrent_assignment.s  {: return new ExprAndAbstractSimpleConcurrentAssignment(e, s); :}
  ;
  
