/*******************************************************************************
 * Copyright (c) 2012 Cesar Yeep.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the BSD 3-Clause License
 * ("New BSD" or "BSD Simplified") which accompanies this distribution,
 * and is available at
 * http://opensource.org/licenses/BSD-3-Clause
 * 
 * Contributors:
 *     Cesar Yeep - initial API and implementation
 ******************************************************************************/

import java.util.Collection;
import java.util.ArrayList;

aspect IteratorOperator {

  //Pretty printer
	//Attribute representing the first boolean expression of the iterate operator
	syn Expr IterateOperatorBody.boolExp() =  !hasBool() ? new BooleanLiteral(true) : getBool();
  
	syn String AbstractIterateOperator.printOp() = "=>";
  
	public void AbstractIterateOperator.toString(StringBuffer s){
		getCaller().toString(s);
		s.append(printOp());
		if(getOperator().startsWith("\\"))
			s.append(getOperator().substring(1));
		else
			s.append(getOperator());
		getBody().toString(s);
	}
	
	public void IterateOperatorBody.toString(StringBuffer s){
		if(hasAccumulator())
			s.append("( " + getIterator() + ", "+ getAccumulator() + "; "+ boolExp() + "; " + getArg() + " )");
		else
			s.append("( " + getIterator() + "; "+ boolExp() + "; " + getArg() + " )");
	}
			
	public void ParameterDeclarationWithExpression.toString(StringBuffer s) {
		getModifiers().toString(s);
		getTypeAccess().toString(s);
		s.append(" " + name());
		s.append(" = ");
		getExpr().toString(s);
	} 
	
  //Name check
 
	//Check if variable is modified in scope
	eq IterateOperatorBody.getIterator().inhModifiedInScope(Variable var) {
		if(hasBool())
			if (getBool().modifiedInScope(var))
			{
				return true;
			}
		if (getArg().modifiedInScope(var))
		{
			return true;
		}
		return false;
	}
	
	eq IterateOperatorBody.getAccumulator().inhModifiedInScope(Variable var) {
		if(hasBool())
			if (getBool().modifiedInScope(var))
			{
				return true;
			}
		if (getArg().modifiedInScope(var))
		{
			return true;
		}
		return false;
	}
			
  //Lookup variable
	inh SimpleSet IterateOperatorBody.lookupVariable(String name);
  
	// The scope of a parameter of a iterate operator are the bool and arg elements
	eq IterateOperatorBody.getArg().lookupVariable(String name) {
		SimpleSet set = parameterDeclaration(name);
		// A declaration of an iterate operator parameter name shadows any other variable declarations
		if(!set.isEmpty()) return set;
			// Delegate to other declarations in scope
			return lookupVariable(name);
	}
	eq IterateOperatorBody.getBool().lookupVariable(String name) {
		SimpleSet set = parameterDeclarationBool(name);
		// A declaration of an iterate operator parameter name shadows any other variable declarations
		if(!set.isEmpty()) return set;
			// Delegate to other declarations in scope
			return lookupVariable(name);
	}
	// An iterate operator may only declare one parameter named name
	// This is enforced by a check that the declaration in scope for a declaration is itself
	eq IterateOperatorBody.getIterator().lookupVariable(String name) = parameterDeclaration(name);
	eq IterateOperatorBody.getAccumulator().lookupVariable(String name) = parameterDeclaration(name);

	syn lazy SimpleSet IterateOperatorBody.parameterDeclaration(String name) {
		if(getIterator().name().equals(name))
			return (ParameterDeclaration)getIterator();
		if(hasAccumulator()){
			if(getAccumulator().name().equals(name))
				return (ParameterDeclaration)getAccumulator();
		}
		return SimpleSet.emptySet;
	}
	
	syn lazy SimpleSet IterateOperatorBody.parameterDeclarationBool(String name) {
		if(getIterator().name().equals(name))
			return (ParameterDeclaration)getIterator();
		return SimpleSet.emptySet;
	}

  //Type analysis
  
	eq IterateOperator.type() = getBody().getAccumulator().getTypeAccess().type();
	eq AnyOperator.type() = getBody().getIterator().getTypeAccess().type();
	eq CollectorOperator.type() {
	    ArrayList args = new ArrayList();
        args.add(getBody().getIterator().getTypeAccess().type());
		return ((GenericClassDecl)lookupType("AST", "CJCollection")).lookupParTypeDecl(args);
	}		
	eq ExistsOperator.type() = typeBoolean(); 
	eq ForAllOperator.type() = typeBoolean(); 
	eq IsUniqueOperator.type() = typeBoolean(); 
	eq OneOperator.type() = typeBoolean();
	eq RejectOperator.type() {
	    ArrayList args = new ArrayList();
        args.add(getBody().getIterator().getTypeAccess().type());
		return ((GenericClassDecl)lookupType("AST", "CJCollection")).lookupParTypeDecl(args);
	}	
	eq SelectOperator.type() {
	    ArrayList args = new ArrayList();
        args.add(getBody().getIterator().getTypeAccess().type());
		return ((GenericClassDecl)lookupType("AST", "CJCollection")).lookupParTypeDecl(args);
	}	
	
  //Type checking
  
	public void AbstractIterateOperator.typeCheck() {	
		//Check that caller expression is of type Array or Iterable
		if(!getCaller().type().isIterable() &&  !getCaller().type().isArrayDecl())
			error("type " + getCaller().type().name() + " of caller expression is neither array type nor java.lang.Iterable");
				  
		else if(getCaller().type().isArrayDecl() && !getCaller().type().componentType().assignConversionTo(getBody().getIterator().type(), null))
			error("iterator variable of type " + getBody().getIterator().type().typeName() + " cannot be assigned an element of type " + getCaller().type().componentType().typeName()); 
		else if(getCaller().type().isIterable() && !getCaller().type().isUnknown()) {
		  MethodDecl iterator = (MethodDecl)getCaller().type().memberMethods("iterator").iterator().next();
		  MethodDecl next = (MethodDecl)iterator.type().memberMethods("next").iterator().next();
		  TypeDecl componentType = next.type();
		  if(!componentType.assignConversionTo(getBody().getIterator().type(), null))
			error("iterator variable of type " + getBody().getIterator().type().typeName() + " cannot be assigned an element of type " + componentType.typeName()); 
		}
		
		//If iterate operator has an accumulator, check type
		if(getBody().hasAccumulator()){
			//Check that E1 is of type T2
			if(!getBody().getAccumulator().getExpr().type().assignConversionTo(getBody().getAccumulator().getTypeAccess().type(),getBody().getAccumulator().getExpr()))
				error("E1 expression \"" + getBody().getAccumulator().getExpr() + "\" in " + getOperator() + " operator is incompatible with type " +
					getBody().getAccumulator().getTypeAccess().type().typeName());
		
			//Check that E2 is of type T2
			if(!getBody().getArg().type().assignConversionTo(getBody().getAccumulator().getTypeAccess().type(), getBody().getArg()) )
				error("E2 expression \"" + getBody().getArg() + "\" in " + getOperator() + " operator must be of type " +
					getBody().getAccumulator().getTypeAccess().type().typeName());
		}
	}

	public void AnyOperator.typeCheck() {
		super.typeCheck();
		if(!getBody().getArg().type().isBoolean())
			error("B2 expression must be a boolean expression");
	}
	
	public void ExistsOperator.typeCheck() {
		super.typeCheck();
		if(!getBody().getArg().type().isBoolean())
			error("B2 expression must be a boolean expression");
	}
	
	public void ForAllOperator.typeCheck() {
		super.typeCheck();
		if(!getBody().getArg().type().isBoolean())
			error("B2 expression must be a boolean expression");
	}
	
	public void OneOperator.typeCheck() {
		super.typeCheck();
		if(!getBody().getArg().type().isBoolean())
			error("B2 expression must be a boolean expression");
	}
	
	public void RejectOperator.typeCheck() {
		super.typeCheck();
		if(!getBody().getArg().type().isBoolean())
			error("B2 expression must be a boolean expression");
	}
	
	public void SelectOperator.typeCheck() {
		super.typeCheck();
		if(!getBody().getArg().type().isBoolean())
			error("B2 expression must be a boolean expression");
	}
}
