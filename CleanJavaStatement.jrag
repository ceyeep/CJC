/*******************************************************************************
 * Copyright (c) 2012 Cesar Yeep.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the BSD 3-Clause License
 * ("New BSD" or "BSD Simplified") which accompanies this distribution,
 * and is available at
 * http://opensource.org/licenses/BSD-3-Clause
 * 
 * Contributors:
 *     Cesar Yeep - initial API and implementation
 ******************************************************************************/
aspect CleanJavaStatement {

  // helper attribute to find the containing CJMethodDecl
	syn CJMethodDecl ASTNode.containingCJMethodDecl() = getParent() != null ? getParent().containingCJMethodDecl() : null;
	syn CJMethodDecl CJMethodDecl.containingCJMethodDecl() = this;
	//syn CJConstructorDecl CJConstructorDecl.containingCJMethodDecl() = this;
	
	//TODO: review attributes in this section
	eq CJMethodDecl.getSpec().lookupVariable(String name) {
		SimpleSet set = parameterDeclaration(name);
		if (!set.isEmpty()) return set;
		// Delegate to other declarations in scope
		return lookupVariable(name);
	}

  // Unreachable Statements (see UnreachableStatements.jrag)

	eq CJStaticInitializer.getSpec().reachable() = true;
	eq CJInstanceInitializer.getSpec().reachable() = true; 
	eq CJMethodDecl.getSpec().reachable() = true;
	eq CJConstructorDecl.getSpec().reachable() = true;


  // Pretty printer
	
	syn String SimpleConcurrentAssignment.printOp() = " := ";
	syn String SimpleConcurrentAssignmentByRef.printOp() = " @= ";
	syn String AbstractCondConcurrentAssignment.printOp() = " | ";
	syn String NDCondConcurrentAssignment.printOp() = " , ";

	public void IntendedFunction.toString(StringBuffer s) {
		for(int i = 0; i < getNumDefinition(); i++) {
			if(i != 0){
				s.append(";");
				s.append(indent());
			}
			getDefinition(i).toString(s);
		}
	}
	
	public void SplitDefinition.toString(StringBuffer s) {
		for(int i = 0; i < getNumAssignment(); i++) {
			if(i != 0){
				s.append(",");
				s.append(indent());
			}
			getAssignment(i).toString(s);
		}
	}
	
	public void SimpleConcurrentAssignment.toString(StringBuffer s) {
		for(int i = 0; i < getNumLocation(); i++) {
			if(i != 0)
				s.append(", ");
			getLocation(i).toString(s);
		}
		
		s.append(printOp());

		for(int i = 0; i < getNumValue(); i++) {
			if(i != 0)
				s.append(", ");
			getValue(i).toString(s);
		}
	}
	
	public void AbstractCondConcurrentAssignment.toString(StringBuffer s) {
		int pairs = getNumPair();

		for(int i = 0; i < pairs; i++) {
			if(i > 0 && i < pairs) {
				s.append(printOp());
				s.append(indent());
			}
			getPair(i).toString(s);
		}
	}
	
	public void CondConcurrentAssignment.toString(StringBuffer s) {
		super.toString(s);
		if(hasElse()){
			s.append(printOp());
			s.append(indent());
			s.append("otherwise -> ");
			getElse().toString(s);
		}
	}
			
	public void ExprAndAbstractSimpleConcurrentAssignment.toString(StringBuffer s) {
		getCondition().toString(s);
		s.append(" -> ");
		getThen().toString(s);
	}
	
	public void Identity.toString(StringBuffer s){
		s.append(" I ");
	}
		
  // Type check
  
	/** Perform type checking in a simple concurrent assignment. */
	public void SimpleConcurrentAssignment.typeCheck() {
		//Check if equation is balanced
		if(getNumLocation() != getNumValue()) {
			error("concurrent assignment is unbalanced");
		}
		else{
			ArrayList<String> variables = new ArrayList<String>();
			ArrayList<String> duplicates = new ArrayList<String>();
			for(int i = 0; i < getNumLocation(); i++) {
				Expr loc = getLocation(i);
				Expr value = getValue(i);
				
				//Check assignment compatiblity
				checkAssignmentCompatiblity(loc,value);
				
				//If node is not a CJResult get var decl name
				if(loc.isVariable()){
					String name = loc.varDecl().name();
					if(!variables.contains(name))
						variables.add(name);
					else
						if(!duplicates.contains(name))
							duplicates.add(name);
				}
				else if(loc.isCJResult()){
					if(!variables.contains("\\result"))
						variables.add("\\result");
					else
						if(!duplicates.contains("\\result"))
							duplicates.add("\\result");
				}
			}

			//Check if there are name duplicates
			if(duplicates.size() > 0)
				error("there are duplicates in the left-hand side of the equation: " + getVariableDuplicates(duplicates));
		}
	}
	
	/** Check assignment compatiblity for simple concurrent assignments. */
	public void SimpleConcurrentAssignment.checkAssignmentCompatiblity(Expr loc, Expr value){
		if(!loc.isVariable() && !loc.isCJResult())
			error(loc+" is not a variable");
		else if(!value.type().assignConversionTo(loc.type(), value) && !value.type().isUnknown())
			error("cannot assign " + loc + " of type " + loc.type().typeName() +
				" a value of type " + value.type().typeName());
		else if(loc.isCJResult() && containingCJMethodDecl() == null)
			error("incorrect use of \\result, \\result must be used within a method declaration");
	}
	
	/** Check assignment compatiblity for simple concurrent assignments by reference. */
	public void SimpleConcurrentAssignmentByRef.checkAssignmentCompatiblity(Expr loc, Expr value){
		if(!loc.isVariable() && !loc.isCJResult())
			error(loc+" is not a variable");
		else if(loc.type().isPrimitive())
			error("cannot use " + loc + " of primitive "+loc.type()+" type using referential semantics"); 
		else if(!value.type().assignConversionTo(loc.type(), value) && !value.type().isUnknown())
			error("cannot assign " + loc + " of type " + loc.type().typeName() +
				" a value of type " + value.type().typeName());
		else if(loc.isCJResult() && containingCJMethodDecl() == null)
			error("incorrect use of \\result, \\result must be used within a method declaration");
	}
		
	/** Get variable duplicate names in a simple concurrent assignemtn. */
	public String SimpleConcurrentAssignment.getVariableDuplicates(ArrayList<String> list)
	{
		String duplicates = "";
		Iterator it = list.iterator();
		while(it.hasNext()){
			duplicates += it.next();
			if(it.hasNext())
				duplicates += ", ";
		}
		return duplicates;
	}
	
	/** Type check creating a single SimpleConcurrentAssignment from
		splitted definitions. */
	public void SplitDefinition.typeCheck() {
		if(getNumAssignment() > 1)
			createSimpleConcurrentAssignmentList();
	}
	
	/** Merge lists of SimpleConcurrentAssignments into a single SimpleConcurrentAssignment. */
	public void SplitDefinition.createSimpleConcurrentAssignmentList(){
		int referential = 0;
		List<Expr> leftHandExprList = new List<Expr>();
		List<Expr> rightHandExprList = new List<Expr>();
		//Iterate over a list of simple concurrent assignments
		for(int i = 0; i < getNumAssignment(); i++) {
				SimpleConcurrentAssignment simpleConcurrentAssignment = getAssignment(i);
				if(simpleConcurrentAssignment instanceof SimpleConcurrentAssignmentByRef)
					referential++;
				//Iterate over simple concurrent assignment locations
				for(int j = 0; j < simpleConcurrentAssignment.getNumLocation(); j++)
					leftHandExprList.add(simpleConcurrentAssignment.getLocation(j));
				//Iterate over simple concurrent assignment values
				for(int j = 0; j < simpleConcurrentAssignment.getNumValue(); j++)
					rightHandExprList.add(simpleConcurrentAssignment.getValue(j));	
		}
		//Check if splitted definition has different definition semantics
		if(referential > 0 && referential < getNumAssignment() )
			error("incorrect use of splitting definitions; you must use the same type of equality tests (e.g. referential semantics or value semantics)");
		//Add a new assignment by ref
		if(referential > 0){
			SimpleConcurrentAssignmentByRef simpleConcurrentAssignmenByRef = new SimpleConcurrentAssignmentByRef(leftHandExprList,rightHandExprList);
			setAssignmentList(new List<SimpleConcurrentAssignment>().add(simpleConcurrentAssignmenByRef));
		}
		//Add a new assignment by value
		else{
			SimpleConcurrentAssignment simpleConcurrentAssignment = new  SimpleConcurrentAssignment(leftHandExprList,rightHandExprList);
			setAssignmentList(new List<SimpleConcurrentAssignment>().add(simpleConcurrentAssignment));
		}
	}
}