/*******************************************************************************
 * Copyright (c) 2012 Cesar Yeep.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the BSD 3-Clause License
 * ("New BSD" or "BSD Simplified") which accompanies this distribution,
 * and is available at
 * http://opensource.org/licenses/BSD-3-Clause
 * 
 * Contributors:
 *     Cesar Yeep - initial API and implementation
 ******************************************************************************/
aspect CleanJavaIntendedFunction{

	//syn String AbstractConcurrentAssignment.printFunctionOpening() = "/* @[ ";
	//syn String AbstractConcurrentAssignment.printFunctionClosing() = " ] */";

	// Pretty printer
	//TODO: intended function shouldn't contain Annotation symbols
	public void AbstractConcurrentAssignment.toString(StringBuffer s) {
		s.append("/* @[ ");
		//s.append(getCJStmt());
		s.append(" ] */");
	}
	
	/* To string for a list of expressions in an intended function
	public void AbstractConcurrentAssignment.toString(StringBuffer s) {
		if(getNumExpr() > 0) {
			for(int i = 0; i < getNumExpr(); i++) {
				if(i != 0)
					s.append(" + ");
				getExpr(i).toString(s);
			}
		}
	}
	*/
	
	// Type check

	/* This would be typeChecking when having a list of expressions in intended function
		Not working, null error after merging lists
		
	public void AbstractConcurrentAssignment.typeCheck() {
		if(getNumExpr() > 0) {
			CJConcurrentAssignExpr cjExpr = new CJConcurrentAssignExpr();
			System.out.println("flag1");
			for(int i = 0; i < getNumExpr(); i++) {

				System.out.println("flag2");
					CJConcurrentAssignExpr tempExpr = new CJConcurrentAssignExpr();
					tempExpr = (CJConcurrentAssignExpr)getExpr(i);
					System.out.println("expression: "+tempExpr.toString());
					if(tempExpr.getNumDest() > 0) {
						for(int j = 0; j < tempExpr.getNumDest(); j++) {
							cjExpr.addDest(tempExpr.getDest(j));
							System.out.println("flag3 variable: "+tempExpr.getDest(j).isVariable());
						}
					}
					if(tempExpr.getNumSource() > 0) {
						for(int j = 0; j < tempExpr.getNumSource(); j++) {
							cjExpr.addSource(tempExpr.getSource(j));
						}
					}
			}
			System.out.println("new expr: "+cjExpr.toString());
			cjExpr.check();
		}
	}
	
	*/


}