/*******************************************************************************
 * Copyright (c) 2012 Cesar Yeep.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the BSD 3-Clause License
 * ("New BSD" or "BSD Simplified") which accompanies this distribution,
 * and is available at
 * http://opensource.org/licenses/BSD-3-Clause
 * 
 * Contributors:
 *     Cesar Yeep - initial API and implementation
 ******************************************************************************/
/*
 * CLEANJAVA AST grammar
 */

//TODO: work in a list of intended functions (function composition i.e. f1;f2)

abstract CJStmt;

//Class body declaration

CJStaticInitializer:StaticInitializer ::= Specs:CJStmt;
CJInstanceInitializer:InstanceInitializer ::= Specs:CJStmt;
CJConstructorDecl:ConstructorDecl ::= Specs:CJStmt;
CJMethodDecl:MethodDecl ::= Specs:CJStmt;

//Statement annotation

CJBlock:Block ::= Specs:CJStmt;

//CleanJava statements

abstract AbstractConcurrentAssignment:CJStmt;

abstract AbstractSimpleConcurrentAssignment:AbstractConcurrentAssignment;

SplittedDefinition:CJStmt ::= Assignment:SimpleConcurrentAssignment*;

SimpleConcurrentAssignment:AbstractSimpleConcurrentAssignment ::= Dest:Expr* Source:Expr*;

SimpleConcurrentAssignmentByRef:SimpleConcurrentAssignment;

Identity:AbstractSimpleConcurrentAssignment ;

CondConcurrentAssignment:AbstractConcurrentAssignment ::= ConditionalAssignment:SingleCondConcurrentAssignment* [Else:AbstractSimpleConcurrentAssignment];

SingleCondConcurrentAssignment ::= Pair:ExprAndAbstractSimpleConcurrentAssignment;

SingleNDCondConcurrentAssignment:SingleCondConcurrentAssignment;

SingleSeqCondConcurrentAssignment:SingleCondConcurrentAssignment;

ExprAndAbstractSimpleConcurrentAssignment ::= Condition:Expr Then:AbstractSimpleConcurrentAssignment;

//CleanJava expressions

InformalDescription:Expr ::= <Description:String>;

CJResult:Expr;

//Literals

AnythingLiteral:Literal;


//Iterator operators

IterateOperator:Access ::= Caller:Expr <Operator:String> Iterator:ParameterDeclaration Accumulator:ParameterDeclarationWithExpression [Bool:Expr] Arg:Expr;

ParameterDeclarationWithExpression:ParameterDeclaration ::= Expr;
