/*******************************************************************************
 * Copyright (c) 2012 Cesar Yeep.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the BSD 3-Clause License
 * ("New BSD" or "BSD Simplified") which accompanies this distribution,
 * and is available at
 * http://opensource.org/licenses/BSD-3-Clause
 * 
 * Contributors:
 *     Cesar Yeep - initial API and implementation
 ******************************************************************************/
/*
 * CLEANJAVA AST grammar
 */

//Class body declaration

CJStaticInitializer:StaticInitializer ::= Spec:CJStmt;
CJInstanceInitializer:InstanceInitializer ::= Spec:CJStmt;
CJConstructorDecl:ConstructorDecl ::= Spec:CJStmt;
CJMethodDecl:MethodDecl ::= Spec:CJStmt;

//Statement annotation

CJBlock:Block ::= Spec:CJStmt;

//CleanJava statements

abstract CJStmt;

IntendedFunction:CJStmt ::= Definition:AbstractConcurrentAssignment*;

abstract AbstractConcurrentAssignment:CJStmt;

abstract AbstractSimpleConcurrentAssignment:AbstractConcurrentAssignment;

SplittedDefinition:AbstractSimpleConcurrentAssignment ::= Assignment:SimpleConcurrentAssignment*;

SimpleConcurrentAssignment:AbstractSimpleConcurrentAssignment ::= Location:Expr* Value:Expr*;

SimpleConcurrentAssignmentByRef:SimpleConcurrentAssignment;

Identity:AbstractSimpleConcurrentAssignment ;

abstract AbstractCondConcurrentAssignment:AbstractConcurrentAssignment ::= Pair:ExprAndAbstractSimpleConcurrentAssignment*;

CondConcurrentAssignment:AbstractCondConcurrentAssignment ::= [Else:AbstractSimpleConcurrentAssignment];

NDCondConcurrentAssignment:AbstractCondConcurrentAssignment;

ExprAndAbstractSimpleConcurrentAssignment ::= Condition:Expr Then:AbstractSimpleConcurrentAssignment;

//CleanJava expressions

InformalDescription:Expr ::= <Description:String>;

CJResult:Expr;

//Literals

AnythingLiteral:Literal;

//Iterator operators

abstract AbstractIterateOperator:Access ::= Caller:Expr <Operator:String> Body:IterateOperatorBody;

IterateOperatorBody ::= Iterator:ParameterDeclaration [Accumulator:ParameterDeclarationWithExpression] [Bool:Expr] Arg:Expr;

ParameterDeclarationWithExpression:ParameterDeclaration ::= Expr;

IterateOperator:AbstractIterateOperator;

AnyOperator:AbstractIterateOperator;

CollectorOperator:AbstractIterateOperator;

ExistsOperator:AbstractIterateOperator;

ForAllOperator:AbstractIterateOperator;

IsUniqueOperator:AbstractIterateOperator;

OneOperator:AbstractIterateOperator;

RejectOperator:AbstractIterateOperator;

SelectOperator:AbstractIterateOperator;
